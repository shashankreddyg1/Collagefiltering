{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shash\\\\OneDrive\\\\Desktop\\\\apipython\\\\frontend\\\\collage\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [nameQuery, setNameQuery] = useState(\"\");\n  const [cityQuery, setCityQuery] = useState(\"\");\n  const [colleges, setColleges] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    const fetchColleges = async () => {\n      if (nameQuery.trim() === \"\" && cityQuery.trim() === \"\") {\n        setColleges([]); // Clear results if both fields are empty\n        setError(null);\n        return;\n      }\n      setLoading(true);\n      setError(null);\n      try {\n        // Construct the API URL with query parameters\n        const url = new URL(\"http://127.0.0.1:5000/college\");\n        if (nameQuery) url.searchParams.append(\"name\", nameQuery);\n        if (cityQuery) url.searchParams.append(\"city\", cityQuery);\n\n        // Make a GET request to the Flask backend\n        const response = await fetch(url.toString());\n        if (response.ok) {\n          const data = await response.json();\n          setColleges(data); // Update state with fetched data\n        } else {\n          const errorMsg = response.status === 404 ? \"No colleges found with the specified criteria.\" : \"Failed to fetch colleges.\";\n          setError(errorMsg);\n          setColleges([]);\n        }\n      } catch (err) {\n        console.error(err);\n        setError(\"An error occurred while fetching data.\");\n        setColleges([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchColleges(); // Call the fetch function\n  }, [nameQuery, cityQuery]); // Re-run when nameQuery or cityQuery changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"College Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search by name\",\n      value: nameQuery,\n      onChange: e => setNameQuery(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search by city\",\n      value: cityQuery,\n      onChange: e => setCityQuery(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: colleges.map((college, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [college.name, \" - \", college.city]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"mFnhSslv9cu33BIymoQNgs3kRDk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","nameQuery","setNameQuery","cityQuery","setCityQuery","colleges","setColleges","error","setError","loading","setLoading","fetchColleges","trim","url","URL","searchParams","append","response","fetch","toString","ok","data","json","errorMsg","status","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","style","color","map","college","index","name","city","_c","$RefreshReg$"],"sources":["C:/Users/shash/OneDrive/Desktop/apipython/frontend/collage/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst App = () => {\n  const [nameQuery, setNameQuery] = useState(\"\");\n  const [cityQuery, setCityQuery] = useState(\"\");\n  const [colleges, setColleges] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchColleges = async () => {\n      if (nameQuery.trim() === \"\" && cityQuery.trim() === \"\") {\n        setColleges([]); // Clear results if both fields are empty\n        setError(null);\n        return;\n      }\n\n      setLoading(true);\n      setError(null);\n\n      try {\n        // Construct the API URL with query parameters\n        const url = new URL(\"http://127.0.0.1:5000/college\");\n        if (nameQuery) url.searchParams.append(\"name\", nameQuery);\n        if (cityQuery) url.searchParams.append(\"city\", cityQuery);\n\n        // Make a GET request to the Flask backend\n        const response = await fetch(url.toString());\n        if (response.ok) {\n          const data = await response.json();\n          setColleges(data); // Update state with fetched data\n        } else {\n          const errorMsg =\n            response.status === 404\n              ? \"No colleges found with the specified criteria.\"\n              : \"Failed to fetch colleges.\";\n          setError(errorMsg);\n          setColleges([]);\n        }\n      } catch (err) {\n        console.error(err);\n        setError(\"An error occurred while fetching data.\");\n        setColleges([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchColleges(); // Call the fetch function\n  }, [nameQuery, cityQuery]); // Re-run when nameQuery or cityQuery changes\n\n  return (\n    <div>\n      <h1>College Search</h1>\n      <input\n        type=\"text\"\n        placeholder=\"Search by name\"\n        value={nameQuery}\n        onChange={(e) => setNameQuery(e.target.value)}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Search by city\"\n        value={cityQuery}\n        onChange={(e) => setCityQuery(e.target.value)}\n      />\n      {loading && <p>Loading...</p>}\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\n      <ul>\n        {colleges.map((college, index) => (\n          <li key={index}>\n            {college.name} - {college.city}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}